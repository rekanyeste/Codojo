<resources>
    <string name="app_name">Codojo</string>
    <string name="hintUsername">Felhasználónév</string>
    <string name="registerHintPassw">Jelszó</string>
    <string name="registerHintPwdAgain">Jelszó megerősítése</string>
    <string name="registerBtn">Regisztráció</string>
    <string name="textAlreadyUser">Már regisztrált? Jelentkezzen be!</string>
    <string name="loginButton">Belépés</string>
    <string name="newUserRegi">Új fiók? Regisztráljon!</string>
    <string name="newUserRegi2">Úgy vagy itt? Regisztrálj!</string>
    <string name="newUserLogin3">Már regisztráltál? Lépj be!</string>
    <string name="newUserLogin4">Új vagy itt? Regisztrálj!</string>
    <string name="emailAddress">Email cím</string>
    <string name="name">Név</string>
    <string name="codojo">Codojo</string>
    <string name="szalagcim">Feketeöves a kódolásban!</string>
    <string name="regiSzalagcim">Regisztráció</string>
    <string name="profil">Profil</string>
    <string name="lernings">Tanulnivalók</string>
    <string name="logout">Kijelentkezés</string>
    <string name="learnings">Tanulnivalók</string>
    <string name="codojo_menu">Codojo</string>
    <string name="menu_navbar">Navbar</string>
    <string name="nav_open">Open</string>
    <string name="nav_close">Close</string>
    <string name="editProfileText">Adatok módosítása</string>
    <string name="fullname">Név</string>
    <string name="editUsername">Felhasználónév</string>
    <string name="editPwd">Jelszó</string>
    <string name="editEmail">Email</string>
    <string name="save">Mentés</string>
    <string name="back">Vissza</string>
    <string name="dataShow">Felhasználói adatok</string>
    <string name="next">Következő</string>
    <string name="fName">Teljes név</string>
    <string name="loggedUser">Felhasználónév</string>
    <string name="nev">Név</string>
    <string name="nev2">név</string>
    <string name="email">Email</string>
    <string name="email2">email</string>
    <string name="felhaszn_l_n_v">Felhasználónév</string>
    <string name="username2">felhasználónév</string>
    <string name="pwd1">Jelszó</string>
    <string name="pwd2">jelszó</string>
    <string name="change">Megváltoztat</string>
    <string name="chose">Kérlek válassz egy kurzust</string>
    <string name="choose">Kérlek, válassz egy kurzust!</string>
    <string name="courseJava">Java</string>
    <string name="CSharpC">C#</string>
    <string name="javaCourses">Java kurzusok és kvízek</string>
    <string name="intro">Bevezetés</string>
    <string name="home">Főoldal</string>
    <string name="backCourse">Vissza</string>
    <string name="variJava">Változók</string>
    <string name="quizVariables">Változók kvíz</string>
    <string name="operatorsJava">Operátorok</string>
    <string name="operatorsQuiz">Operátorok kvíz</string>
    <string name="controls">Elágazások, ciklusok</string>
    <string name="controlsQuiz">Elágazások, ciklusok kvíz</string>
    <string name="arrays">Tömbök, listák</string>
    <string name="arraysQuiz">Tömbök, listák kvíz</string>
    <string name="methods">Metódusok</string>
    <string name="methodsQuiz">Metódusok kvíz</string>
    <string name="classes">Osztályok</string>
    <string name="type">Típuskonverziók</string>
    <string name="finalQuiz">Java összegző kvíz</string>
    <string name="intro00">Bevezetés</string>
    <string name="TV_01">A Java egy rendkívül sokoldalú és népszerű programozási nyelv, amely széles körben használatos szoftverfejlesztésben, webalkalmazásokban, mobilalkalmazásokban és sok más területen. A Java egy erőteljes eszköz a fejlesztők számára, mivel lehetővé teszi az objektumorientált programozás előnyeinek kihasználását, egyszerűen kezelhető, és a Java alkalmazások szinte minden platformon futtathatók. Ez a bevezető arra fog összpontosítani, hogy megismertesse Önt a Java nyelv alapjaival és a programozás alapvető fogalmaival.</string>
    <string name="whatsJavaIs">Mi is pontosan a Java?</string>
    <string name="TV_02">A Java egy objektumorientált programozási nyelv, amelyet eredetileg a Sun Microsystems (később felvásárolta az Oracle Corporation) fejlesztett ki az 1990-es évek elején. Azóta a Java számos verziót és fejlesztést ért meg, amelyeknek köszönhetően a nyelv folyamatosan fejlődik és a fejlesztői igényekhez igazodik. A Java nyelvet általában az: egyszer írd meg, hogy futtathasd bárhol jelmondat jellemezte, mivel a Java alkalmazásokat Java virtuális gépen (JVM) futtatják, ami lehetővé teszi azok futtatását különböző platformokon anélkül, hogy szükség lenne a forráskód újrafordítására.</string>
    <string name="Synthax">Nyelvi elemek Javában</string>
    <string name="TV_03">A Java nyelv alapjait különböző fogalmak alkotják, például változók, adatszerkezetek, vezérlési szerkezetek, metódusok stb. Ezek az elemek építőkövei a Java programoknak, és azok megértése elengedhetetlen ahhoz, hogy hatékonyan tudjunk kódolni Java-ban. A változók tárolják az adatokat, az adatszerkezetek segítségével csoportosíthatjuk ezeket az adatokat, a vezérlési szerkezetek irányítják a program folyamatát, a metódusok pedig az újrafelhasználható kód részei.</string>
    <string name="OOPJava">Objektumorientált programozás alapjai</string>
    <string name="TV_04">Az objektumorientált programozás (OOP) alapvető elvei közé tartozik az öröklődés, az absztrakció, az egységbezárás és a sokalakúság. Ezek az elvek lehetővé teszik a programok moduláris tervezését, a kód újrafelhasználhatóságát és a fejlesztési folyamat hatékonyságát. A Java szorosan követi az OOP elveit, és lehetőséget biztosít osztályok és objektumok létrehozására, öröklődésre vagy interfészek implementálására is.</string>
    <string name="backToJavaCourseList">Vissza</string>
    <string name="variables01">Változók</string>
    <string name="TV_11">A változók az adatok tárolására szolgáló névvel ellátott helyek a memóriában. A változóknak lehet egy vagy több típusa, amely meghatározza, hogy milyen adatokat tárolhatnak. A Java nyelv támogatja a primitív változókat és a referencia változókat.</string>
    <string name="TV_12">Primitív változók: Ezek olyan alapvető adattípusok, amelyeket közvetlenül a memóriában tárolnak, és azok értékei közvetlenül az értékük. Például:</string>
    <string name="TV_13">int: egész számokat tárol, például: int age = 25;</string>
    <string name="TV_14">double: lebegőpontos számokat tárol, például: double pi = 3.14;</string>
    <string name="TV_15">boolean: logikai értéket tárol (true vagy false), például: boolean isJavaFun = true;</string>
    <string name="TV_16">char: egyetlen karaktert tárol Unicode formátumban, például: char grade = \'A\';</string>
    <string name="TV_17">Referencia változók: Ezek olyan változók, amelyek egy objektumra vagy tömbre mutatnak a memóriában. Az objektumok és tömbök tényleges adatokat és műveleteket tárolnak. Például:</string>
    <string name="TV_18">String: karakterláncokat tárol, például: String name = John;</string>
    <string name="TV_19">Object: az ősosztály, amelyből minden más osztály származik, például: Object obj = new Object();</string>
    <string name="inic">Változók deklarálása és inicializálása</string>
    <string name="TV_20"><![CDATA[A változókat deklarálni kell, mielőtt használnánk őket. A deklaráció a változó típusának és nevének meghatározását jelenti. Például: int age; <- ez egy deklaráció]]></string>
    <string name="TV_21"><![CDATA[Inicializálni kell a változókat, mielőtt értéküket elérnénk. Ez azt jelenti, hogy értéket adunk nekik a memóriában. Például: age = 25; <- ez egy inicializáció (értékadás)]]></string>
    <string name="age">Ezután az age változó 25 értéket fog tárolni.</string>
    <string name="nrOneQuiz">1. kvíz: Változók</string>
    <string name="question">Kérdés</string>
    <string name="firstOptionVar">Első válasz</string>
    <string name="secondOptionVar">Második válasz</string>
    <string name="thirdOptionVar">Harmadik válasz</string>
    <string name="fourthOptionVar">Negyedik válasz</string>
    <string name="score">Elért pontszám:</string>
    <string name="tryAgain">Próbáld újra!</string>
    <string name="python">Python</string>
    <string name="operatorsjav">Operátorok</string>
    <string name="TV_30">Az operátorok a Java nyelvben olyan speciális szimbólumok, amelyek segítségével műveleteket hajtunk végre változókon és értékeken. Az operátorok lehetnek aritmetikai, összehasonlító, logikai és bitenkénti műveleteket végzők, és lehetnek egy vagy több operandusuk.</string>
    <string name="arithmetic">1. Aritmetikai operátorok</string>
    <string name="plus">Összeadás (+): Két érték összeadása.</string>
    <string name="minus">Kivonás (-): Egy értékből kivonunk egy másikat.</string>
    <string name="multiply">Szorzás (*): Két érték szorzata.</string>
    <string name="divide">Osztás (/): Egy értéket osztunk egy másikkal.</string>
    <string name="divide02">Maradékos osztás (%): Két érték maradékos osztása.</string>
    <string name="hasonlit">2. Összehasonlító operátorok:</string>
    <string name="equal">Egyenlőség (==): Két érték egyenlőségének ellenőrzése.</string>
    <string name="notequal">Nem egyenlőség (!=): Két érték különbözőségének ellenőrzése.</string>
    <string name="restofoperators"><![CDATA[Nagyobb (>), Kisebb (<), Nagyobb vagy egyenlő (>=), Kisebb vagy egyenlő (<=): Értékek közötti összehasonlítás.]]></string>
    <string name="logic">3. Logikai operátorok:</string>
    <string name="and"><![CDATA[És (&&): Logikai ÉS művelet, mindkét feltételnek igaznak kell lennie.]]></string>
    <string name="or">Vagy (||): Logikai VAGY művelet, legalább az egyik feltétel igaznak kell lennie.</string>
    <string name="negation">Nem (!): Logikai NEGÁCIÓ, egy feltétel ellentettjét adja meg.</string>
    <string name="bitenkent">4. Bitenkénti operátorok</string>
    <string name="bitAnd"><![CDATA[És (&): Bitenkénti ÉS művelet.]]></string>
    <string name="bitOR">Vagy (|): Bitenkénti VAGY művelet.</string>
    <string name="bitXOR">XOR (^): Bitenkénti KIZÁRÓ VAGY művelet.</string>
    <string name="eltolas"><![CDATA[Balra/megfelelően eltolás (<<, >>): A bináris szám biteinek balra vagy jobbra történő eltolása.]]></string>
    <string name="plusAndMinus">5. Hozzáadási és kivonási operátorok:</string>
    <string name="plsuegyenlo">Hozzáadás és értékadás (+=): Az operandusok összeadása és az eredmény értékének hozzáadása a bal oldali operandushoz.</string>
    <string name="minusegyenlo">Kivonás és értékadás (-=): Az operandusok kivonása és az eredmény értékének levonása a bal oldali operandusból.</string>
    <string name="loops">Elágazások</string>
    <string name="operators">2. kvíz: Operátorok</string>
    <string name="loopsTV">Elágazások, ciklusok</string>
    <string name="elagazas">1. Elágazások</string>
    <string name="TV_40">Az elágazások olyan vezérlési szerkezetek, amelyek segítségével a program különböző útvonalakat követhet a futása során a feltételek függvényében. Az elágazások a program számára lehetőséget adnak arra, hogy dinamikusan döntsön a különböző feltételek teljesülése esetén.</string>
    <string name="if_else_">if-else utasítás:</string>
    <string name="TV_41">Az if-else utasítás segítségével egy feltételt vizsgálunk meg, és a feltétel igazságától függően különböző műveleteket hajtunk végre. Ha a feltétel igaz, akkor az if ág fut, ellenkező esetben az else ág fut. Ez lehetővé teszi a program számára, hogy különböző utasításokat hajtson végre különböző körülmények között.</string>
    <string name="switch_case">switch-case utasítás:</string>
    <string name="TV_42">A switch-case utasítás lehetőséget ad arra, hogy egy változó értékét több különböző esetben vizsgáljuk meg. Minden esetben meghatározott műveleteket hajtunk végre, amelyek az adott esetnek megfelelnek. A switch-case utasítás alternatívákat kínál az egyes értékek kezelésére, és több esetben is végre tudja hajtani ugyanazt a műveletet.</string>
    <string name="loop">2. Ciklusok:</string>
    <string name="TV_43">A ciklusok olyan vezérlési szerkezetek, amelyek segítségével a program ismételten hajthat végre egy adott műveletsort, amíg egy bizonyos feltétel teljesül.</string>
    <string name="forLoop">for ciklus:</string>
    <string name="TV_44">A for ciklus általában egy számlálóval rendelkezik, amelyet kezdetben inicializálunk, majd az iterációk során növelünk vagy csökkentünk. A for ciklus addig ismétli a kódot, amíg a megadott feltétel igaz, majd kilép a ciklusból, amikor a feltétel hamis lesz.</string>
    <string name="while_ciklus">while ciklus:</string>
    <string name="while_loop">A while ciklus csak akkor hajtja végre a kódot, ha a megadott feltétel igaz. A ciklus minden egyes iterációja előtt újra ellenőrzi a feltételt, és csak akkor folytatódik, ha a feltétel igaz marad. Amikor a feltétel hamis lesz, a ciklus megszakad.</string>
    <string name="do_while_ciklus">do-while ciklus:</string>
    <string name="dowhile">A do-while ciklus nagyon hasonlít a while ciklushoz, de legalább egyszer lefut, még akkor is, ha a feltétel az első alkalommal hamis. Ezután minden iteráció előtt ellenőrzi a feltételt, és csak akkor folytatódik, ha a feltétel igaz. Hátul-tesztelő ciklusnak is szokták hívni.</string>
    <string name="loop_vegszo">Ezek az elágazások és ciklusok fontos építőkövei a Java programozásnak, és lehetővé teszik a programok számára, hogy dinamikusan válasszanak különböző utakat és ismételjék meg a kódot bizonyos feltételek teljesülése esetén.</string>
    <string name="loops03">3. kvíz: Elágazások, ciklusok</string>
    <string name="arrays_">Tömbök</string>
    <string name="arrays01">Adatszerkezetek</string>
    <string name="TV_50">Az adatszerkezetek az adatok szervezésére szolgáló mechanizmusok, amelyek lehetővé teszik az adatok hatékony kezelését, tárolását és manipulálását. A Java nyelv számos beépített adatszerkezetet tartalmaz, amelyek közül néhány alapvető és gyakran használt adatszerkezet a következők:</string>
    <string name="arrays03">1. Tömbök (Arrays):</string>
    <string name="tombok">A tömb egy olyan adatszerkezet, amely több azonos típusú elemet tárol egy sorban vagy többdimenziós struktúrában. A tömbök fix méretűek, és az elemek indexek segítségével hozzáférhetők.</string>
    <string name="declareTomb">Tömb deklarálása és inicializálása: int[] numbers = new int[5];</string>
    <string name="tomb01">int[] numbers = new int[5];</string>
    <string name="list01">2. Listák (List):</string>
    <string name="TV_51">A lista dinamikusan változó méretű adatszerkezet, amely az elemek sorrendjét tartja nyilván. A Java-ban a java.util.List interfész számos implementációt kínál, például az ArrayList vagy a LinkedList.</string>
    <string name="declareList"><![CDATA[List<String> names = new ArrayList<>();]]></string>
    <string name="halmazok">3. Halmazok (Set):</string>
    <string name="sets">A halmaz egy olyan adatszerkezet, amely egyedi elemeket tartalmaz, és nem engedi meg a duplikált elemeket. A java.util.Set interfész számos implementációt kínál, például a HashSet vagy a TreeSet.</string>
    <string name="declareSet"><![CDATA[Set<Integer> uniqueNumbers = new HashSet<>();]]></string>
    <string name="maps">4. Térkép (Map):</string>
    <string name="maps2">A térkép egy kulcs-érték párok halmaza, ahol a kulcsok egyediek, és minden kulcshoz egy érték tartozik. A java.util.Map interfész számos implementációt kínál, például a HashMap vagy a TreeMap.</string>
    <string name="declareMap"><![CDATA[Map<String, Integer> ages = new HashMap<>();]]></string>
    <string name="stack">5. Verem (Stack):</string>
    <string name="lifo">A verem egy LIFO (Last In, First Out) elven működő adatszerkezet, ahol a legutoljára hozzáadott elemet először távolítják el. A Java-ban a vermeket a java.util.Stack osztály képviseli.</string>
    <string name="declareStack"><![CDATA[Stack<Integer> stack = new Stack<>();]]></string>
    <string name="queue">6. Várak (Queue):</string>
    <string name="fifo">A várak egy FIFO (First In, First Out) elven működő adatszerkezetek, ahol az elsőként hozzáadott elemet először távolítják el. A Java-ban a várakat a java.util.Queue interfész számos implementációja képviseli, például a LinkedList vagy a PriorityQueue.</string>
    <string name="declareQueue"><![CDATA[Queue<String> queue = new LinkedList<>();]]></string>
    <string name="arraysTV">4. kvíz: Adatszerkezetek</string>
    <string name="TV_60">A metódusok (eljárások vagy függvények) olyan kódrészletek, amelyek egy adott feladatot hajtanak végre. A metódusok lehetővé teszik a kód újrafelhasználhatóságát, olvashatóságát és karbantarthatóságát, mivel ugyanazt a műveletet többször is meghívhatjuk anélkül, hogy ismételnénk a kódot.</string>
    <string name="functionDeclare">1. Függvény deklarációja:</string>
    <string name="function">A függvény deklarációja meghatározza a nevét, a visszatérési típust, a paraméterek listáját és a függvény törzsét (ami tartalmazza a kódot). Például:</string>
    <string name="declareFunc">public int add(int a, int b) {return a + b;}</string>
    <string name="methods1">Metódusok</string>
    <string name="eljaras">2. Visszatérési érték:</string>
    <string name="TV_62">A metódusok lehetnek olyanok, amelyek visszatérnek egy értékkel (ezeket hívjuk függvényeknek, mindig van visszatérési értékük és a return utasítás kötelező elemük) vagy olyanok, amelyeknek nincs visszatérési értéke, azaz az eljárások (void típussal). Például:</string>
    <string name="declareEljaras">public void greet() {System.out.println(Hello!);}</string>
    <string name="params">3. Paraméterek:</string>
    <string name="params1">A metódusok paramétereket fogadhatnak, amelyek adatokat továbbíthatnak a metódusnak. A paraméterek típusát és nevét meg kell adni a metódus deklarációjában. Például:</string>
    <string name="methodsCall">4. Metódus meghívása:</string>
    <string name="TV_63">A metódusokat más kódrészletekből (pl.: a Main-ből) lehet meghívni a metódus nevének és a megfelelő argumentumok megadásával. Például:</string>
    <string name="overload">Túlterhelés (overloading):</string>
    <string name="TV_64">A Java támogatja a metódus túlterhelését, ami azt jelenti, hogy ugyanazt a metódusnevet több változatban is lehet definiálni, amelyek különböznek a paraméterek számától vagy típusától. Például:</string>
    <string name="methods2">5. kvíz: Metódusok</string>
    <string name="classesNext">Osztályok</string>
    <string name="classes1">Osztályok</string>
    <string name="introClass">Az osztályok alapvető építőkövei a Java programozási nyelvnek. Az osztályok olyan sablonok, melyek segítségével objektumokat hozhatunk létre. Az objektumok az adatokat és a hozzájuk kapcsolódó műveleteket (metódusokat) egyetlen egységbe zárják. Itt van egy részletesebb kifejtés az osztályokkal kapcsolatban:</string>
    <string name="declareClass">1. Osztálydeklaráció:</string>
    <string name="declareCl">Az osztálydeklaráció meghatározza az osztály nevét és a benne tárolt adatok és műveletek típusait. Például:</string>
    <string name="tags">2. Adattagok:</string>
    <string name="fields">Az adattagok (vagy mezők) az osztály által tárolt adatok. Ezek az osztály változói, amelyek az osztályon belül definiáltak. Például:</string>
    <string name="classMethods">3. Metódusok:</string>
    <string name="methodsDeclare">A metódusok a műveletek, amelyek az osztályban végrehajthatók. Ezek az osztály funkciói, amelyek elérhetők az osztály objektumai számára. Például:</string>
    <string name="objects">4. Objektumok létrehozása:</string>
    <string name="TV_70">Az osztály alapján objektumokat hozhatunk létre. Az objektumok példányosításával a memóriában helyet foglalunk az adatoknak és a metódusoknak. Például:</string>
    <string name="inherit">5. Öröklődés:</string>
    <string name="inheritance">Az öröklődés lehetővé teszi egy osztály (a leszármazott osztály) számára, hogy örökölje egy másik osztály (a szülő osztály) tulajdonságait és metódusait. Ez a Java egyik alapvető objektumorientált tulajdonsága. Például:</string>
    <string name="typeNext">Típuskonverziók</string>
    <string name="castingTV">Típuskonverziók</string>
    <string name="kasztolas">A típuskonverziók (casting) a Java-ban az egyik legfontosabb technika, amely lehetővé teszi az adattípusok közötti átalakítást. Ez különösen hasznos, amikor az egyik adattípusból származó értéket egy másik adattípusba szeretnénk átkonvertálni.</string>
    <string name="implicitType">1. Automatikus (implicit) típuskonverzió:</string>
    <string name="automaticTypeConv">Az automatikus típuskonverzió akkor történik, amikor a kisebb tartományú adattípusból egy nagyobb tartományú adattípusba konvertálunk. Ez azért lehetséges, mert a céladattípus a forrásadattípus tartományát is képes kezelni anélkül, hogy adatvesztés lenne. Például:</string>
    <string name="typeConvImplicit">Az automatikus típuskonverzió automatikusan történik, amikor a kisebb tartományú adattípusból egy nagyobb tartományú adattípusba konvertálunk. Ez azért lehetséges, mert a céladattípus a forrásadattípus tartományát is képes kezelni anélkül, hogy adatvesztés lenne.</string>
    <string name="explicitTypeConv">2. Kényszerített (explicit) típuskonverzió:</string>
    <string name="explConv">A kényszerített típuskonverzió során manuálisan megadjuk a konverziót, amikor az automatikus típuskonverzió nem elegendő vagy nem megfelelő. Ez gyakran fordul elő, amikor egy nagyobb tartományú adattípusból egy kisebb tartományú adattípusba próbálunk konvertálni. A kényszerített típuskonverzió potenciálisan adatvesztést okozhat, ha a céladattípus nem képes kezelni a forrásadattípus teljes tartományát.</string>
    <string name="oopConv">3. Típuskonverzió az objektumorientált programozásban:</string>
    <string name="upAndDownCast">Az objektumorientált programozásban a típuskonverzió az osztályok közötti hierarchiákban is létezik. Például, ha egy szülőosztály referenciáját tároljuk egy gyermekosztály objektumára, akkor a típuskonverzió lehetőséget ad arra, hogy a szülőosztály referenciáját a gyermekosztály referenciájává alakítsuk, hogy a gyermekosztály specifikus metódusait elérjük. Ez az ún. upcasting és downcasting. Például:</string>
    <string name="finalJavaQuiz">Összegző Java kvíz</string>
    <string name="finalJava">Java összegés</string>
    <string name="pythonCourses">Python kurzusok és kvízek</string>
    <string name="synthaxPython">Alapok és a szintaxis</string>
    <string name="methodsPython">Függvények és modulok</string>
    <string name="pythonStructures">Adatszerkezetek</string>
    <string name="pythonSzoveg">Szövegkezelés és reguláris kifejezések</string>
    <string name="filePython">Fájlkezelés</string>
    <string name="finalQuizPy">Python összegző kvíz</string>
</resources>